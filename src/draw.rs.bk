use std::sync::atomic;
use std::sync::mpsc;
use std::thread;
use std::time;

use glium;
use glium::DisplayBuild;
use glium::Surface;

use error;
use world;

#[derive(Copy, Clone)]
struct Vertex {
    position: [f32; 2],
}

implement_vertex!(Vertex, position);

impl Vertex {
    pub fn new(x: f32, y: f32) -> Vertex {
        Vertex { position: [x, y] }
    }
}

pub fn draw_loop<'a>(rate: u64,
                     incoming: mpsc::Receiver<&'a world::World>,
                     outgoing: mpsc::Sender<&'a world::World>) {
    let display = glium::glutin::WindowBuilder::new()
                      .build_glium()
                      .expect("Could not build glium window!");

    for world in incoming {
        let mut target = display.draw();
        target.clear_color(1.0, 1.0, 1.0, 1.0);

        draw_world(&display, &mut target, world).expect("Could not draw world!");
        outgoing.send(world);

        target.finish().expect("Could not finish drawing!");

        for ev in display.poll_events() {
            if let glium::glutin::Event::Closed = ev {
                return;
            }
        }


        if rate > 0 {
            thread::sleep(time::Duration::from_millis(rate));
        }
    }
}

pub fn draw_world<F, S>(display: &F,
                        target: &mut S,
                        world: &world::World)
                        -> Result<(), error::Error>
    where F: glium::backend::Facade,
          S: glium::Surface
{
    let vertex_shader_source = r#"
#version 140

in vec2 position;

void main() {
    gl_Position = vec4(position, 0.0, 1.0);
}
"#;

    let fragment_shader_source = r#"
#version 140

out vec4 color;

void main() {
    color = vec4(0.0, 0.0, 0.0, 1.0);
}
"#;

    let program = try!(glium::Program::from_source(display,
                                                   vertex_shader_source,
                                                   fragment_shader_source,
                                                   None));

    let cell_height = 2f32 / world.height() as f32;
    let cell_width = 2f32 / world.width() as f32;

    let mut triangles = vec![];

    for (i, row) in world.rows().enumerate() {
        for (j, cell) in row.iter().enumerate() {
            if !cell.load(atomic::Ordering::SeqCst) {
                continue;
            }

            let v1 = Vertex::new((j as f32 * cell_width) - 1f32,
                                 (i as f32 * cell_height) - 1f32);
            let v2 = Vertex::new(((j as f32 + 1f32) * cell_width) - 1f32,
                                 (i as f32 * cell_height) - 1f32);
            let v3 = Vertex::new(((j as f32 + 1f32) * cell_width) - 1f32,
                                 ((i as f32 + 1f32) * cell_height) - 1f32);
            let v4 = Vertex::new((j as f32 * cell_width) - 1f32,
                                 ((i as f32 + 1f32) * cell_height) - 1f32);

            triangles.push(v1);
            triangles.push(v2);
            triangles.push(v3);

            triangles.push(v1);
            triangles.push(v3);
            triangles.push(v4);
        }
    }

    let vertex_buffer = try!(glium::VertexBuffer::new(display, &triangles));
    let indices = glium::index::NoIndices(glium::index::PrimitiveType::TrianglesList);

    try!(target.draw(&vertex_buffer,
                     &indices,
                     &program,
                     &glium::uniforms::EmptyUniforms,
                     &Default::default()));

    Ok(())
}
